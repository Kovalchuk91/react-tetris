{"version":3,"sources":["lib/helpers.js","components/Cell.jsx","components/Row.jsx","components/Board.jsx","lib/figures/Square.js","components/Next.jsx","components/Info.jsx","components/Controls.jsx","App.jsx","lib/figures/Line.js","lib/figures/T.js","lib/figures/L.js","lib/figures/L2.js","lib/figures/Z.js","lib/figures/Z2.js","index.js"],"names":["arrayRandom","array","Math","floor","random","length","memoize","func","memoized","arg","hasOwnProperty","createKeysArray","i","push","Cell","color","transparent","style","lighterColor","Color","lighten","hex","darkerColor","darken","backgroundColor","borderTopColor","borderLeftColor","borderRightColor","borderBottomColor","borderStyle","className","Row","row","cellColor","map","key","Board","borderLeft","borderTop","borderRight","borderBottom","getWidth","getAllCells","x","y","Next","figure","width","height","cellIsFilled","cell","some","Info","title","info","Controls","up","left","right","down","useState","timer","setTimer","onHold","callable","time","setInterval","onRelease","clearInterval","type","onClick","onMouseDown","onTouchStart","onMouseUp","onMouseLeave","onTouchEnd","allFigures","rotate","Square","allColors","App","state","isRunning","level","score","filledCells","nextFigure","nextColor","startLevel","alert","setState","newFigure","moveDown","abs","checkIfGameOver","figureShouldFreeze","window","confirm","location","reload","close","freezeFigure","moveLeft","newX","figureX","figureY","moveRight","newRotate","prevWidth","newWidth","newY","ceil","figureCells","removeFilledRows","removedRows","newFilledCells","filledRows","filter","addScores","scored","newScore","find","cellInFilled","document","onkeydown","e","event","keyCode","this","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.896f14d7.chunk.js","sourcesContent":["export const arrayRandom = array => {\n  return array[Math.floor(Math.random() * array.length)];\n};\n\nexport const memoize = func => {\n  const memoized = {};\n\n  return arg => {\n    if (!memoized.hasOwnProperty(arg)) {\n      memoized[arg] = func(arg);\n    }\n\n    return memoized[arg];\n  };\n};\n\nexport const createKeysArray = memoize(length => {\n  const array = [];\n\n  for (let i = 0; i < length; i += 1) {\n    array.push(i);\n  }\n\n  return array;\n});\n","import React from \"react\";\nimport Color from \"color\";\nimport { PropTypes } from \"prop-types\";\nimport { memoize } from \"../lib/helpers\";\nimport \"./Cell.css\";\n\nconst Cell = ({ color, transparent }) => {\n  let style = {};\n\n  if (color) {\n    const lighterColor = memoize(color => {\n      return Color(color)\n        .lighten(0.2)\n        .hex();\n    })(color);\n\n    const darkerColor = memoize(color => {\n      return Color(color)\n        .darken(0.2)\n        .hex();\n    })(color);\n\n    style = {\n      backgroundColor: color,\n      borderTopColor: lighterColor,\n      borderLeftColor: lighterColor,\n      borderRightColor: darkerColor,\n      borderBottomColor: darkerColor,\n      borderStyle: \"solid\"\n    };\n  } else if (transparent) {\n    style = {\n      backgroundColor: \"transparent\"\n    };\n  } else {\n    style = {\n      backgroundColor: \"#303030\"\n    };\n  }\n\n  return (\n    <td\n      className=\"Cell\"\n      style={{\n        borderStyle: transparent ? \"hidden\" : \"solid\"\n      }}\n    >\n      <div className=\"Cell-cube\" style={style} />\n    </td>\n  );\n};\n\nCell.propTypes = {\n  color: PropTypes.string.isRequired,\n  transparent: PropTypes.bool.isRequired\n};\n\nexport default Cell;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cell from \"./Cell\";\nimport { createKeysArray } from \"../lib/helpers\";\n\nconst cells = 11;\n\nconst Row = ({ row, cellColor }) => {\n  return (\n    <tr>\n      {createKeysArray(cells).map(key => (\n        <Cell key={key} color={cellColor(row, key)} />\n      ))}\n    </tr>\n  );\n};\n\nRow.propTypes = {\n  row: PropTypes.number.isRequired,\n  cellColor: PropTypes.func.isRequired\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"./Row\";\nimport { createKeysArray } from \"../lib/helpers\";\nimport \"./Board.css\";\n\nconst Board = ({ cellColor }) => {\n  const rows = 22;\n\n  return (\n    <div\n      className=\"Board\"\n      style={{\n        borderLeft: \"3px solid #1B2433\",\n        borderTop: \"3px solid #1B2433\",\n        borderRight: \"3px solid #3C5F9E\",\n        borderBottom: \"3px solid #3C5F9E\"\n      }}\n    >\n      <table className=\"Board-table\">\n        <tbody>\n          {createKeysArray(rows).map(row => (\n            <Row cellColor={cellColor} row={row} key={row} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Board;\n","export default {\n  getWidth: () => 2,\n\n  getAllCells(x, y) {\n    return [\n      [x, y],\n      [x + 1, y + 1],\n      [x, y + 1],\n      [x + 1, y]\n    ];\n  }\n};\n","import React from \"react\";\n\nimport { createKeysArray } from \"../lib/helpers\";\nimport Cell from \"./Cell\";\nimport \"./Next.css\";\n\nconst Next = ({ figure, color }) => {\n  const width = figure.getWidth(0);\n  const height = figure.getWidth(1);\n\n  const cellIsFilled = (row, cell) => {\n    return figure\n      .getAllCells(0, 0, 0)\n      .some(([x, y]) => x === cell && row === y);\n  };\n\n  return (\n    <div>\n      <h3 className=\"Next-heading\">Next</h3>\n      <div className=\"Next-block\">\n        <table className=\"Next-table\">\n          <tbody>\n            {createKeysArray(height).map(row => (\n              <tr key={row}>\n                {createKeysArray(width).map(cell => (\n                  <Cell\n                    color={cellIsFilled(row, cell) ? color : null}\n                    transparent\n                    key={cell}\n                  />\n                ))}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Next;\n","import React from \"react\";\n\nimport \"./Info.css\";\n\nconst Info = ({ title, info }) => {\n  return (\n    <div className=\"Info\">\n      <h3 className=\"Info-heading\">{title}</h3>\n      <div className=\"Info-block\">{info}</div>\n    </div>\n  );\n};\n\nexport default Info;\n","import React, { useState } from \"react\";\nimport \"./Controls.css\";\n\nconst Controls = ({ up, left, right, down }) => {\n  const [timer, setTimer] = useState(null);\n\n  const onHold = (callable, time) => setTimer(setInterval(callable, time));\n\n  const onRelease = () => clearInterval(timer);\n\n  return (\n    <div className=\"Controls\">\n      <button\n        type=\"button\"\n        onClick={left}\n        onMouseDown={() => onHold(left, 200)}\n        onTouchStart={() => onHold(left, 200)}\n        onMouseUp={onRelease}\n        onMouseLeave={onRelease}\n        onTouchEnd={onRelease}\n      >\n        <span className=\"ControlsIcon icon-arrow-long-left\" />\n      </button>\n      <button type=\"button\" onClick={up}>\n        <span className=\"ControlsIcon icon-cycle\" />\n      </button>\n      <button\n        type=\"button\"\n        onClick={down}\n        onMouseDown={() => onHold(down, 100)}\n        onTouchStart={() => onHold(down, 200)}\n        onMouseUp={onRelease}\n        onMouseLeave={onRelease}\n        onTouchEnd={onRelease}\n      >\n        <span className=\"ControlsIcon icon-arrow-long-down\" />\n      </button>\n      <button\n        type=\"button\"\n        onClick={right}\n        onMouseDown={() => onHold(right, 200)}\n        onTouchStart={() => onHold(right, 200)}\n        onMouseUp={onRelease}\n        onMouseLeave={onRelease}\n        onTouchEnd={onRelease}\n      >\n        <span className=\"ControlsIcon icon-arrow-long-right\" />\n      </button>\n    </div>\n  );\n};\n\nexport default Controls;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport { arrayRandom } from \"./lib/helpers\";\nimport Board from \"./components/Board\";\nimport Square from \"./lib/figures/Square\";\nimport Line from \"./lib/figures/Line\";\nimport T from \"./lib/figures/T\";\nimport L from \"./lib/figures/L\";\nimport L2 from \"./lib/figures/L2\";\nimport Z from \"./lib/figures/Z\";\nimport Z2 from \"./lib/figures/Z2\";\nimport Next from \"./components/Next\";\nimport Info from \"./components/Info\";\nimport Controls from \"./components/Controls\";\n\nconst allFigures = [Line, Square, T, L, L2, Z, Z2];\nconst allColors = [\n  \"#f2c202\",\n  \"#F16B54\",\n  \"#55BB80\",\n  \"#504DA0\",\n  \"#F6904D\",\n  \"#22C0F2\"\n];\n\nclass App extends React.Component {\n  state = {\n    isRunning: false,\n    level: 1,\n    score: 0,\n    timer: null,\n    filledCells: [],\n    figure: Square,\n    color: null,\n    nextFigure: null,\n    nextColor: null,\n    rotate: 0,\n    x: 0,\n    y: 0\n  };\n\n  componentDidMount() {\n    document.onkeydown = e => {\n      e = e || window.event;\n\n      if (e.keyCode === 38) {\n        this.rotate();\n      } else if (e.keyCode === 40) {\n        this.moveDown();\n      } else if (e.keyCode === 37) {\n        this.moveLeft();\n      } else if (e.keyCode === 39) {\n        this.moveRight();\n      }\n    };\n\n    const nextFigure = arrayRandom(allFigures);\n    const nextColor = arrayRandom(allColors);\n    this.setState({ nextFigure, nextColor }, () => this.startLevel(1));\n  }\n\n  startLevel = level => {\n    alert(`Level ${level}`);\n    this.setState({ level });\n\n    clearInterval(this.state.timer);\n\n    this.newFigure();\n\n    const timer = setInterval(this.moveDown, 800 / level);\n    this.setState({ timer });\n  };\n\n  newFigure = () => {\n    const nextFigure = arrayRandom(allFigures);\n    const figure = this.state.nextFigure;\n\n    const nextColor = arrayRandom(allColors);\n    const color = this.state.nextColor;\n\n    const rotate = Math.floor(Math.random() * 3);\n    const x = Math.abs(\n      Math.floor(Math.random() * 11 - figure.getWidth(rotate))\n    );\n\n    this.setState(\n      { figure, nextFigure, color, nextColor, x, y: 0, rotate },\n      this.checkIfGameOver\n    );\n  };\n\n  checkIfGameOver = () => {\n    if (this.figureShouldFreeze()) {\n      this.setState({ isRunning: false });\n      clearInterval(this.state.timer);\n\n      if (window.confirm('Game over! Restart?')) {\n        window.location.reload();\n      } else {\n        window.close();\n      }\n    }\n  };\n\n  moveDown = () => {\n    const { y } = this.state;\n\n    this.setState({ y: y + 1 }, () => {\n      if (this.figureShouldFreeze()) {\n        this.freezeFigure();\n        this.newFigure();\n      }\n    });\n  };\n\n  moveLeft = () => {\n    const { x, y, rotate, figure } = this.state;\n\n    // Don't move if figure is leftmost\n    if (x === 0) {\n      return;\n    }\n\n    const newX = x - 1;\n    const newFigureCells = figure.getAllCells(newX, y, rotate);\n    const leftCellsAreFree = !newFigureCells.some(([figureX, figureY]) => this.cellIsFilled(figureY, figureX));\n\n    if (leftCellsAreFree) {\n      this.setState({ x: x - 1 });\n    }\n  };\n\n  moveRight = () => {\n    const { x, y, rotate, figure } = this.state;\n\n    // Don't move if rightmost\n    if (x === 11 - figure.getWidth(rotate)) {\n      return;\n    }\n\n    const newX = x + 1;\n    const newFigureCells = figure.getAllCells(newX, y, rotate);\n    const rightCellsAreFree = !newFigureCells.some(([figureX, figureY]) => this.cellIsFilled(figureY, figureX));\n\n    if (rightCellsAreFree) {\n      this.setState({ x: x + 1 });\n    }\n  };\n\n  rotate = () => {\n    const { rotate, figure, x, y } = this.state;\n\n    const newRotate = rotate === 3 ? 0 : rotate + 1;\n    const prevWidth = figure.getWidth(rotate);\n    const newWidth = figure.getWidth(newRotate);\n    const isStickedToRight = x + prevWidth === 11;\n    let newX = x;\n    let newY = y;\n\n    // Prevent figure to be out of border\n    if (isStickedToRight && prevWidth < newWidth) {\n      newX = x - (newWidth - prevWidth);\n    }\n\n    // Move half up\n    if (prevWidth > newWidth) {\n      newY = y - Math.ceil((prevWidth - newWidth) / 2);\n    }\n\n    this.setState({ rotate: newRotate, x: newX, y: newY });\n  };\n\n  figureShouldFreeze = () => {\n    const {figure, x, y, rotate} = this.state;\n    const figureCells = figure.getAllCells(x, y, rotate);\n\n    // Figure is at the bottom\n    // eslint-disable-next-line no-unused-vars\n    const isInBottom = figureCells.some(([_, figureY]) => figureY === 21);\n    if (isInBottom) return true;\n\n    // Figure touches freezed cells\n    const { filledCells } = this.state;\n    return figureCells.some(([figureX, figureY]) =>\n      filledCells.some(([x, y]) => x === figureX && y === figureY + 1)\n    );\n  };\n\n  freezeFigure = () => {\n    const { filledCells, x, y, rotate, color } = this.state;\n    const figureCells = this.state.figure.getAllCells(x, y, rotate).map(cell => {\n      cell.push(color);\n      return cell;\n    });\n\n    this.setState({ filledCells: [...filledCells, ...figureCells] }, this.removeFilledRows);\n  };\n\n  removeFilledRows = () => {\n    const { filledCells } = this.state;\n    let removedRows = 0;\n    let newFilledCells = filledCells;\n    const filledRows = [];\n\n    // Go through each row and check if it is filled\n    for (let row = 0; row <= 22; row += 1) {\n      const rowsIsFilled = newFilledCells.filter(([x, y]) => y === row).length === 11;\n\n      if (rowsIsFilled) {\n        filledRows.push(row);\n\n        // Go through rows and remove\n        newFilledCells = newFilledCells.filter(([x, y]) => y !== row);\n\n        // Go through all previous rows and move them down\n        newFilledCells = newFilledCells.map(([x, y, color]) => {\n          return y < row ? [x, y + 1, color] : [x, y, color];\n        });\n\n        removedRows += 1;\n      }\n    }\n\n    this.setState({ filledCells: newFilledCells });\n    this.addScores(removedRows);\n  };\n\n  addScores = removedRows => {\n    const { level, score } = this.state;\n\n    let scored = 0;\n    switch (removedRows) {\n      case 1:\n        scored += 50 * (level + 1);\n        break;\n      case 2:\n        scored += 150 * (level + 1);\n        break;\n      case 3:\n        scored += 350 * (level + 1);\n        break;\n      case 4:\n        scored += 1000 * (level + 1);\n        break;\n      default:\n        return;\n    }\n\n    const newScore = score + scored;\n    this.setState({ score: newScore });\n\n    if (Math.ceil(newScore / 1000) > level) {\n      this.startLevel(level + 1);\n    }\n  };\n\n  cellIsFilled = (row, cell) => this.state.filledCells.some(([x, y]) => x === cell && y === row);\n\n  cellColor = (row, cell) => {\n    const { filledCells, x, y, rotate, color, figure } = this.state;\n\n    const figureCells = figure.getAllCells(x, y, rotate);\n    const cellInFigure = figureCells.find(([x, y]) => x === cell && row === y);\n    if (cellInFigure) return color;\n\n    const cellInFilled = filledCells.find(([x, y]) => x === cell && row === y);\n    if (cellInFilled) return cellInFilled[2];\n\n    return null;\n  };\n\n  render() {\n    const { level, score, nextFigure, nextColor } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-main\">\n          <div className=\"App-board\">\n            <Board cellColor={this.cellColor} />\n          </div>\n          <div className=\"App-info\">\n            <Info title=\"Level\" info={level} />\n            <Info title=\"Score\" info={score} />\n            {nextColor && <Next figure={nextFigure} color={nextColor} />}\n          </div>\n        </div>\n        <div className=\"App-controls\">\n          <Controls\n            up={this.rotate}\n            left={this.moveLeft}\n            right={this.moveRight}\n            down={this.moveDown}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 1 : 4),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate % 2 === 0) {\n      return [\n        [x, y],\n        [x, y + 1],\n        [x, y + 2],\n        [x, y + 3]\n      ];\n    }\n\n    return [\n      [x, y],\n      [x + 1, y],\n      [x + 2, y],\n      [x + 3, y]\n    ];\n  }\n};\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 3 : 2),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate === 0) {\n      return [\n        [x + 1, y],\n        [x, y + 1],\n        [x + 1, y + 1],\n        [x + 2, y + 1]\n      ];\n    }\n\n    if (rotate === 1) {\n      return [\n        [x, y],\n        [x, y + 1],\n        [x, y + 2],\n        [x + 1, y + 1]\n      ];\n    }\n\n    if (rotate === 2) {\n      return [\n        [x, y],\n        [x + 1, y],\n        [x + 2, y],\n        [x + 1, y + 1]\n      ];\n    }\n\n    if (rotate === 3) {\n      return [\n        [x, y + 1],\n        [x + 1, y],\n        [x + 1, y + 1],\n        [x + 1, y + 2]\n      ];\n    }\n\n    return null;\n  }\n};\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 2 : 3),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate === 0) {\n      return [\n        [x, y],\n        [x + 1, y],\n        [x, y + 1],\n        [x, y + 2]\n      ];\n    }\n\n    if (rotate === 1) {\n      return [\n        [x, y],\n        [x + 1, y],\n        [x + 2, y],\n        [x + 2, y + 1]\n      ];\n    }\n\n    if (rotate === 2) {\n      return [\n        [x, y + 2],\n        [x + 1, y],\n        [x + 1, y + 1],\n        [x + 1, y + 2]\n      ];\n    }\n\n    if (rotate === 3) {\n      return [\n        [x, y],\n        [x, y + 1],\n        [x + 1, y + 1],\n        [x + 2, y + 1]\n      ];\n    }\n\n    return null;\n  }\n};\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 2 : 3),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate === 0) {\n      return [\n        [x, y],\n        [x + 1, y],\n        [x + 1, y + 1],\n        [x + 1, y + 2]\n      ];\n    }\n\n    if (rotate === 1) {\n      return [\n        [x + 2, y],\n        [x, y + 1],\n        [x + 1, y + 1],\n        [x + 2, y + 1]\n      ];\n    }\n\n    if (rotate === 2) {\n      return [\n        [x + 1, y + 2],\n        [x, y],\n        [x, y + 1],\n        [x, y + 2]\n      ];\n    }\n\n    if (rotate === 3) {\n      return [\n        [x, y],\n        [x, y + 1],\n        [x + 1, y],\n        [x + 2, y]\n      ];\n    }\n\n    return null;\n  }\n};\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 2 : 3),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate % 2 === 0) {\n      return [\n        [x + 1, y],\n        [x, y + 1],\n        [x, y + 2],\n        [x + 1, y + 1]\n      ];\n    }\n\n    return [\n      [x, y],\n      [x + 1, y],\n      [x + 1, y + 1],\n      [x + 2, y + 1]\n    ];\n  }\n};\n","export default {\n  getWidth: rotate => (rotate % 2 === 0 ? 2 : 3),\n\n  getAllCells: (x, y, rotate) => {\n    if (rotate % 2 === 0) {\n      return [\n        [x, y],\n        [x, y + 1],\n        [x + 1, y + 2],\n        [x + 1, y + 1]\n      ];\n    }\n\n    return [\n      [x + 1, y + 1],\n      [x + 1, y],\n      [x, y + 1],\n      [x + 2, y]\n    ];\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}